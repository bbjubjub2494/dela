package controller

import (
	"time"

	"go.dedis.ch/dela"
	"go.dedis.ch/dela/cmd"
	"go.dedis.ch/dela/mino/minogrpc"
	"go.dedis.ch/dela/mino/minogrpc/routing"
	"golang.org/x/xerrors"
)

// Minimal is a controller with the minimum set of commands.
//
// - implements cmd.Controller
type minimal struct{}

// NewMinimal returns a new controller to start an instance of Minogrpc.
func NewMinimal() cmd.Controller {
	return minimal{}
}

// Build implements cmd.Controller. It builds the commands of the controller.
func (m minimal) Build(builder cmd.Builder) {
	builder.Start(
		cmd.IntFlag{
			Name:  "port",
			Usage: "set the port to listen on",
			Value: 2000,
		},
	)

	cli := builder.Command("minogrpc").
		Description("Network overlay administration")

	cli.Command("certificates").
		Description("list the certificates of the server").
		Action(certAction{})

	cli.Command("token").
		Description("generate a token to share to others to join the network").
		Flags(
			cmd.DurationFlag{
				Name:  "expiration",
				Usage: "amount of time before expiration",
				Value: 24 * time.Hour,
			},
		).
		Action(tokenAction{})

	cli.Command("join").
		Description("join a network of participants").
		Flags(
			cmd.StringFlag{
				Name:     "token",
				Usage:    "secret token generated by the node to join",
				Required: true,
			},
			cmd.StringFlag{
				Name:     "address",
				Usage:    "address of the node to join",
				Required: true,
			},
			cmd.StringFlag{
				Name:     "cert-hash",
				Usage:    "certificate hash of the distant server",
				Required: true,
			},
		).
		Action(joinAction{})
}

// Run implements cmd.Controller. It starts the minogrpc instance and inject it
// in the dependency resolver.
func (m minimal) Run(ctx cmd.Context, inj cmd.Injector) error {
	rf := routing.NewTreeRoutingFactory(3, minogrpc.AddressFactory{})

	port := ctx.Int("port")
	if port < 0 || port > 65535 {
		return xerrors.Errorf("invalid port value %d", port)
	}

	o, err := minogrpc.NewMinogrpc("127.0.0.1", uint16(port), rf)
	if err != nil {
		return xerrors.Errorf("couldn't make overlay: %v", err)
	}

	inj.Inject(o)

	dela.Logger.Info().Msgf("%v is running", o)

	return nil
}
