package controller

import (
	"crypto/tls"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"math/rand"
	"time"

	"go.dedis.ch/dela"
	"go.dedis.ch/dela/cmd"
	"go.dedis.ch/dela/mino"
	"go.dedis.ch/dela/mino/minogrpc"
	"go.dedis.ch/dela/mino/minogrpc/routing"
	"golang.org/x/xerrors"
)

type minimal struct{}

// NewMinimal returns a new controller to start an instance of Minogrpc.
func NewMinimal() cmd.Controller {
	return minimal{}
}

func (m minimal) Build(builder cmd.Builder) {
	cli := builder.Command("minogrpc")

	cli.Command("certificates").
		Description("list the certificates of the server").
		Action(certAction{})

	cli.Command("token").
		Description("generate a token to share to others to join the network").
		Flags(
			cmd.DurationFlag{
				Name:  "expiration",
				Usage: "amount of time before expiration",
				Value: 24 * time.Hour,
			},
		).
		Action(tokenAction{})

	cli.Command("join").
		Description("join a network of participants").
		Flags(
			cmd.StringFlag{
				Name:     "token",
				Usage:    "secret token generated by the node to join",
				Required: true,
			},
			cmd.StringFlag{
				Name:     "address",
				Usage:    "address of the node to join",
				Required: true,
			},
			cmd.StringFlag{
				Name:     "cert-hash",
				Usage:    "certificate hash of the distant server",
				Required: true,
			},
		).
		Action(joinAction{})
}

func (m minimal) Run(inj cmd.Injector) error {
	rf := routing.NewTreeRoutingFactory(3, minogrpc.AddressFactory{})

	rand.Seed(time.Now().Unix())

	o, err := minogrpc.NewMinogrpc("127.0.0.1", 2000+uint16(rand.Int31n(100)), rf)
	if err != nil {
		return err
	}

	inj.Inject(o)

	dela.Logger.Info().Msgf("%v is running", o)

	return nil
}

type certAction struct{}

func (a certAction) Prepare(ctx cmd.Context) ([]byte, error) {
	return nil, nil
}

func (a certAction) Execute(req cmd.Request) error {
	var m *minogrpc.Minogrpc
	err := req.Injector.Resolve(&m)
	if err != nil {
		return xerrors.Errorf("couldn't inject: %v", err)
	}

	m.GetCertificateStore().Range(func(addr mino.Address, cert *tls.Certificate) bool {
		fmt.Fprintf(req.Out, "Address: %v Certificate: %v\n", addr, cert.Leaf.NotAfter)
		return true
	})

	return nil
}

type tokenRequest struct {
	Expiration time.Duration
}

type tokenAction struct{}

func (a tokenAction) Prepare(ctx cmd.Context) ([]byte, error) {
	req := tokenRequest{
		Expiration: ctx.Duration("expiration"),
	}

	buffer, err := json.Marshal(req)
	if err != nil {
		return nil, err
	}

	return buffer, nil
}

func (a tokenAction) Execute(req cmd.Request) error {
	dec := json.NewDecoder(req.In)

	input := tokenRequest{}
	err := dec.Decode(&input)
	if err != nil {
		return err
	}

	var m *minogrpc.Minogrpc
	err = req.Injector.Resolve(&m)
	if err != nil {
		return xerrors.Errorf("couldn't inject: %v", err)
	}

	token := m.Token(input.Expiration)

	digest, err := m.GetCertificateStore().Hash(m.GetCertificate())
	if err != nil {
		return err
	}

	fmt.Fprintf(req.Out, "--token %s --cert-hash %s\n",
		token, base64.StdEncoding.EncodeToString(digest))

	return nil
}

type joinRequest struct {
	Token    string
	Addr     string
	CertHash string
}

type joinAction struct{}

func (a joinAction) Prepare(ctx cmd.Context) ([]byte, error) {
	req := joinRequest{
		Token:    ctx.String("token"),
		Addr:     ctx.String("address"),
		CertHash: ctx.String("cert-hash"),
	}

	buffer, err := json.Marshal(req)
	if err != nil {
		return nil, err
	}

	return buffer, nil
}

func (a joinAction) Execute(req cmd.Request) error {
	dec := json.NewDecoder(req.In)

	var input joinRequest
	err := dec.Decode(&input)
	if err != nil {
		return err
	}

	var m *minogrpc.Minogrpc
	err = req.Injector.Resolve(&m)
	if err != nil {
		return err
	}

	cert, err := base64.StdEncoding.DecodeString(input.CertHash)
	if err != nil {
		return err
	}

	err = m.Join(input.Addr, input.Token, cert)
	if err != nil {
		return err
	}

	return nil
}
