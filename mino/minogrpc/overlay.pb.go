// Code generated by protoc-gen-go. DO NOT EDIT.
// source: overlay.proto

package minogrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Envelope is wrapper around a message and one or several recipients.
type Envelope struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
	Relay                string   `protobuf:"bytes,3,opt,name=relay,proto3" json:"relay,omitempty"`
	Message              *any.Any `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_61fc82527fbe24ad, []int{0}
}

func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Envelope.Unmarshal(m, b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
}
func (m *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(m, src)
}
func (m *Envelope) XXX_Size() int {
	return xxx_messageInfo_Envelope.Size(m)
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Envelope) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Envelope) GetRelay() string {
	if m != nil {
		return m.Relay
	}
	return ""
}

func (m *Envelope) GetMessage() *any.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

type OverlayMsg struct {
	Message              *any.Any `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OverlayMsg) Reset()         { *m = OverlayMsg{} }
func (m *OverlayMsg) String() string { return proto.CompactTextString(m) }
func (*OverlayMsg) ProtoMessage()    {}
func (*OverlayMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_61fc82527fbe24ad, []int{1}
}

func (m *OverlayMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OverlayMsg.Unmarshal(m, b)
}
func (m *OverlayMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OverlayMsg.Marshal(b, m, deterministic)
}
func (m *OverlayMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OverlayMsg.Merge(m, src)
}
func (m *OverlayMsg) XXX_Size() int {
	return xxx_messageInfo_OverlayMsg.Size(m)
}
func (m *OverlayMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_OverlayMsg.DiscardUnknown(m)
}

var xxx_messageInfo_OverlayMsg proto.InternalMessageInfo

func (m *OverlayMsg) GetMessage() *any.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*Envelope)(nil), "minogrpc.Envelope")
	proto.RegisterType((*OverlayMsg)(nil), "minogrpc.OverlayMsg")
}

func init() { proto.RegisterFile("overlay.proto", fileDescriptor_61fc82527fbe24ad) }

var fileDescriptor_61fc82527fbe24ad = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8f, 0x3f, 0x4b, 0x04, 0x31,
	0x10, 0xc5, 0xcd, 0xde, 0x7a, 0x7f, 0x46, 0xb4, 0x18, 0xb6, 0x88, 0x57, 0x2d, 0x5b, 0xa5, 0xca,
	0xc9, 0x69, 0x25, 0x36, 0x22, 0x96, 0x22, 0xac, 0x9f, 0x20, 0x27, 0x73, 0x41, 0x48, 0x32, 0x4b,
	0x36, 0x1e, 0x2c, 0x7e, 0x79, 0x21, 0x7b, 0x8b, 0x16, 0x16, 0x5e, 0x37, 0xf3, 0x78, 0xbf, 0x79,
	0x6f, 0xe0, 0x92, 0x0f, 0x14, 0x9d, 0x19, 0x74, 0x17, 0x39, 0x31, 0x2e, 0xfd, 0x47, 0x60, 0x1b,
	0xbb, 0xf7, 0xf5, 0xb5, 0x65, 0xb6, 0x8e, 0x36, 0x59, 0xdf, 0x7d, 0xee, 0x37, 0x26, 0x1c, 0x4d,
	0x4d, 0x82, 0xe5, 0x73, 0x38, 0x90, 0xe3, 0x8e, 0x10, 0xa1, 0xdc, 0x47, 0xf6, 0x52, 0xd4, 0x42,
	0xad, 0xda, 0x3c, 0xe3, 0x15, 0x14, 0x89, 0x65, 0x51, 0xcf, 0xd4, 0xaa, 0x2d, 0x12, 0x63, 0x05,
	0xe7, 0x91, 0x9c, 0x19, 0xe4, 0x2c, 0x9b, 0xc6, 0x05, 0x35, 0x2c, 0x3c, 0xf5, 0xbd, 0xb1, 0x24,
	0xcb, 0x5a, 0xa8, 0x8b, 0x6d, 0xa5, 0xc7, 0x48, 0x3d, 0x45, 0xea, 0xc7, 0x30, 0xb4, 0x93, 0xa9,
	0x79, 0x00, 0x78, 0x1d, 0xbb, 0xbe, 0xf4, 0xf6, 0x37, 0x2d, 0xfe, 0x41, 0x6f, 0xbf, 0x60, 0x71,
	0xa4, 0xf1, 0x0e, 0xca, 0x27, 0xe3, 0x1c, 0x56, 0x7a, 0x7a, 0x56, 0xff, 0x1c, 0x5e, 0xff, 0xa9,
	0x36, 0x67, 0x78, 0x0f, 0xf3, 0xb7, 0x14, 0xc9, 0xf8, 0xd3, 0x38, 0x25, 0x6e, 0xc4, 0x6e, 0x9e,
	0x3b, 0xdd, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x52, 0x38, 0x99, 0x79, 0x6d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OverlayClient is the client API for Overlay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OverlayClient interface {
	Call(ctx context.Context, in *OverlayMsg, opts ...grpc.CallOption) (*OverlayMsg, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Overlay_StreamClient, error)
}

type overlayClient struct {
	cc *grpc.ClientConn
}

func NewOverlayClient(cc *grpc.ClientConn) OverlayClient {
	return &overlayClient{cc}
}

func (c *overlayClient) Call(ctx context.Context, in *OverlayMsg, opts ...grpc.CallOption) (*OverlayMsg, error) {
	out := new(OverlayMsg)
	err := c.cc.Invoke(ctx, "/minogrpc.Overlay/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overlayClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Overlay_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Overlay_serviceDesc.Streams[0], "/minogrpc.Overlay/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &overlayStreamClient{stream}
	return x, nil
}

type Overlay_StreamClient interface {
	Send(*OverlayMsg) error
	Recv() (*OverlayMsg, error)
	grpc.ClientStream
}

type overlayStreamClient struct {
	grpc.ClientStream
}

func (x *overlayStreamClient) Send(m *OverlayMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *overlayStreamClient) Recv() (*OverlayMsg, error) {
	m := new(OverlayMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OverlayServer is the server API for Overlay service.
type OverlayServer interface {
	Call(context.Context, *OverlayMsg) (*OverlayMsg, error)
	Stream(Overlay_StreamServer) error
}

// UnimplementedOverlayServer can be embedded to have forward compatible implementations.
type UnimplementedOverlayServer struct {
}

func (*UnimplementedOverlayServer) Call(ctx context.Context, req *OverlayMsg) (*OverlayMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedOverlayServer) Stream(srv Overlay_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterOverlayServer(s *grpc.Server, srv OverlayServer) {
	s.RegisterService(&_Overlay_serviceDesc, srv)
}

func _Overlay_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverlayMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minogrpc.Overlay/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).Call(ctx, req.(*OverlayMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overlay_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OverlayServer).Stream(&overlayStreamServer{stream})
}

type Overlay_StreamServer interface {
	Send(*OverlayMsg) error
	Recv() (*OverlayMsg, error)
	grpc.ServerStream
}

type overlayStreamServer struct {
	grpc.ServerStream
}

func (x *overlayStreamServer) Send(m *OverlayMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *overlayStreamServer) Recv() (*OverlayMsg, error) {
	m := new(OverlayMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Overlay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "minogrpc.Overlay",
	HandlerType: (*OverlayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Overlay_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Overlay_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "overlay.proto",
}
